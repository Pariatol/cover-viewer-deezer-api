{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","genre","setGenre","listMetalBands","handleClick","e","music","preventDefault","console","log","className","class","id","data-toggle","data-target","onClick","Cover","props","isLoading","setIsLoading","url","setUrl","band","setBand","album","setAlbum","fetchData","a","fetch","json","then","res","newList","albums","data","filter","item","artist","random","Math","floor","length","cover_big","title","catch","err","useEffect","youtubeSearch","amazonSearch","src","href","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gRA0EeA,MAtEf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,KAITC,EAAiB,CAAC,cAAc,YAAY,YAAY,SAAS,WAAW,SAAS,QAAQ,eAAe,QAAQ,eAAe,eAAe,WAAW,YAAY,YAAY,iBAAiB,aAAa,QAAQ,SAAS,UAAU,SAAS,eAAe,gBAAgB,SAAS,cAAc,cAAc,aAAa,cAAc,kBAAkB,UAAU,QAAQ,OAAO,UAAU,oBAAoB,UAAU,YAAY,UAAU,OAAO,aAAa,QAAQ,YAAY,SAAS,WAAW,YAAY,uBAAuB,eAAe,YAAY,WAAW,QAAQ,cAAc,WAAW,SAAS,YAAY,iBAAiB,eAAe,MAAM,eAAe,YAAY,YAAY,WAAW,eAAe,YAAY,gBAAgB,UAAU,SAAS,SAAS,gBAAgB,UAAU,QAAQ,YAAY,YAAY,UAAU,YAAY,kBAAkB,OAAO,WAAW,YAAY,eAAe,WAAW,mBAAmB,iBAAiB,yBAAyB,WAAW,SAAS,SAAS,cAAc,YAAY,iBAAiB,iBAAiB,YAAY,oBAAoB,kBAAkB,WAAW,UAAU,YAAY,WAAW,iBAAiB,UAAU,cAAc,mBAAmB,SAAS,qBAAqB,YAAY,YAAY,4BAA4B,qBAAqB,oBAAoB,YAAY,eAAe,kBAAkB,aAAa,YAAY,OAAO,mBAAmB,mBAAmB,UAAU,wBAAwB,gBAAgB,WAAW,OAAO,kBAAkB,OAAO,QAAQ,cAAc,QAAQ,oBAAoB,SAAS,WAAW,YAAY,WAAY,YAAY,sBAAsB,UAAU,UAAU,aAAa,eAAe,YAAY,QAAQ,YAAY,SAAS,UAAU,mBAI/wDC,EAAc,SAACC,EAAEC,GAGrB,OAFAD,EAAEE,iBACFC,QAAQC,IAAI,QAAQH,GACbA,GACL,IAAK,QACHJ,EAAS,SACT,MACF,IAAK,OACHA,EAAS,QACT,MACF,IAAK,WACDA,EAAS,cAMjB,OACE,yBAAKQ,UAAU,OAanB,yBAAKC,MAAM,2DAA2DC,GAAG,YACjE,yBAAKD,MAAM,aACP,4BAAQA,MAAM,iBAAiBE,cAAY,WAAWC,cAAY,mBAC9D,0BAAMH,MAAM,yBAEhB,yBAAKA,MAAM,2BAA2BC,GAAG,kBACrC,wBAAID,MAAM,yCACN,wBAAIA,MAAM,iBACR,uBAAGA,MAAM,WAAWI,QAAS,SAACV,GAAD,OAAKD,EAAYC,EAAE,WAAhD,UAEF,wBAAIM,MAAM,iBACR,uBAAGA,MAAM,WAAWI,QAAS,SAACV,GAAD,OAAKD,EAAYC,EAAE,UAAhD,SAEF,wBAAIM,MAAM,iBACR,uBAAGA,MAAM,WAAWI,QAAS,SAACV,GAAD,OAAKD,EAAYC,EAAE,cAAhD,kBAOP,KAARJ,EAAW,kBAAC,EAAD,CAAOA,MAAOE,IAAkB,KACnC,UAARF,EAAgB,kBAAC,EAAD,CAAOA,MAAOE,IAAkB,KACxC,SAARF,EAAe,kBAAC,EAAD,CAAOA,MAzDZ,CAAC,cAAc,gBAAgB,kBAAkB,iBAAiB,aAAa,gBAAgB,iBAAiB,iBAAiB,kBAAkB,aAAa,YAAY,iBAAiB,iBAAiB,cAAc,iBAAiB,kBAAkB,kBAAkB,iBAAiB,kBAAkB,eAAe,gBAAgB,iBAAiB,cAAc,kBAAkB,eAAe,gBAAgB,eAAe,eAAe,gBAAgB,YAAY,aAAa,gBAAgB,gBAAgB,gBAyD3e,KACjC,aAARA,EAAmB,kBAAC,EAAD,CAAOA,MAzDhB,CAAC,aAAa,QAAQ,gBAAgB,cAAc,gBAAgB,iBAAiB,OAAO,QAAQ,UAAU,MAAM,aAAa,eAAe,cAAc,yBAAyB,UAAU,8BAyD9J,OAS9Ce,EAAQ,SAACC,GAAW,IAAD,EACWjB,oBAAS,GADpB,mBAChBkB,EADgB,KACLC,EADK,OAEDnB,mBAAS,IAFR,mBAEhBoB,EAFgB,KAEXC,EAFW,OAGCrB,mBAAS,IAHV,mBAGhBsB,EAHgB,KAGVC,EAHU,OAIGvB,mBAAS,IAJZ,mBAIhBwB,EAJgB,KAITC,EAJS,cAMRC,EANQ,8EAMvB,WAAyBJ,GAAzB,SAAAK,EAAA,sEACoBC,MAAM,oFAAD,OAAqFN,IAD9G,cAEMO,OACDC,MAAK,SAAAC,GACJ,IAAIC,EAAUD,EAAIE,OAAOC,KAAKC,QAAO,SAAAC,GAAI,OAAGA,EAAKC,OAAL,OAAwBf,KAChEgB,EAASC,KAAKC,MAAMD,KAAKD,SAAUC,KAAKC,MAAMR,EAAQS,SAC1DpB,EAAOW,EAAQM,GAAQI,WACvBjB,EAASO,EAAQM,GAAQK,OACzBpB,EAAQD,GACRH,GAAa,MAEdyB,OAAM,SAAAC,GAAG,OAAIrC,QAAQC,IAAIoC,MAX9B,4CANuB,sBAoBvBC,qBAAU,WACRpB,EAAUT,EAAMhB,MAAMsC,KAAKC,MAAMD,KAAKD,SAAUC,KAAKC,MAAMvB,EAAMhB,MAAMwC,aACvE,IAEF,IAAIM,EAAa,uDAAmDzB,EAAnD,YAA2DE,EAA3D,eACbwB,EAAY,oCAAgC1B,EAAhC,YAAwCE,EAAxC,wDAGhB,OACE,yBAAKd,UAAU,SACZQ,GAAa,sDAEd,yBACAR,UAAU,WACVuC,IAAK7B,EACLL,QAAS,kBAAIW,EAAUT,EAAMhB,MAAMsC,KAAKC,MAAMD,KAAKD,SAAUC,KAAKC,MAAMvB,EAAMhB,MAAMwC,cAGpF,yBAAK/B,UAAU,QACZY,GAGH,yBAAKZ,UAAU,SACZc,EADH,KACW,uBAAG0B,KAAMH,EAAeI,OAAO,UAAS,uBAAGxC,MAAM,oBAD5D,IACsF,uBAAGuC,KAAMF,EAAcG,OAAO,UAAS,uBAAGxC,MAAM,mBADtI,KAEA,yBAAKD,UAAU,OAAf,0CC5Gc0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACL1D,QAAQ0D,MAAMA,EAAMC,a","file":"static/js/main.599d6e29.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\n\nfunction App() {\n\n  const [genre, setGenre] = useState('');\n\n  let listMetalBands = ['Iron Maiden','Meshuggah','Metallica','Mayhem','Mastodon','Gojira','Edguy','Stratovarius','Saxon','Grave Digger','Morbid Angel','Megadeth','Powerwolf','Ensiferum','Blind Guardian','Arch Enemy','Vader','Watain','Emperor','Marduk','Manilla Road','Blut Aus Nord','Burzum','Gatecreeper','Amon Amarth','Darkthrone','Annihilator','Rivers Of Nihil','Bathory','Death','Mgla','Manowar','Children of Bodom','Pantera','Rammstein','Deicide','Nile','Dissection','Ghost','Disentomb','Windir','Behemoth','Satyricon','Harakiri for the Sky','Dimmu Borgir','Hypocrisy','Immortal','Opeth','Decapitated','Amorphis','Slayer','Sepultura','Sonata Arctica','Celtic Frost','Dio','Bolt Thrower','Katatonia','Gorgoroth','Entombed','Cult of Luna','Helloween','Dream Theater','Anthrax','Accept','Exodus','Mercyful Fate','Kreator','Venom','Nightwish','In Flames','Sabaton','Bloodbath','Type O Negative','Down','Exeloume','Testament','Napalm Death','Obituary','Rhapsody of Fire','Devin Townsend','Devin Townsend Project','Midnight','Ihsahn','Alcest','Lacuna Coil','Eluveitie','Anaal Nathrakh','Rotting Christ','Moonspell','Dark Tranquillity','Cradle of Filth','Slipknot','Therion','Tristania','Soilwork','As I Lay Dying','Haggard','Septicflesh','Shadow of Intent','Jinjer','Infant Annihilator','Belphegor','AU Dessus','Regarde Les Hommes Tomber','The Great Old Ones','Blood Incantation','Tomb Mold','Crypt Sermon','Sentient Horror','Carcariass','Obsequiae','Xoth','Midnight Odyssey','Deathspell Omega','Belenos','The Ruins Of Beverast','Dark Fortress','Enslaved','Envy','Atlantean Kodex','1349','Ulver','In Mourning','Taake','Carpathian Forest','Abbath','Neurosis','Sunn O)))','Be\\'Lakor','Graveworm','Mors Principium Est','Morgoth','Atheist','Immolation','Necrophagist','Archspire','Gorod','Cryptopsy','Inferi','Obscura','Beyond Creation'];\n  let listJazz = ['Miles Davis','John Coltrane','Ornette Coleman','Charlie Parker','Chet Baker','Kenny Burrell','Wes Montgomery','Duke Ellington','Thelonious Monk','Bud Powell','Art Tatum','Oscar Peterson','Herbie Hancock','Count Basie','Oscar Peterson','Louis Armstrong','Dizzy Gillespie','Charles Mingus','Coleman Hawkins','Lester Young','Sidney Bechet','Billie Holiday','Nina Simone','Ella Fitzgerald','Archie Shepp','Benny Goodman','Roy Eldridge','Benny Carter','Johnny Hodges','Gil Evans','Art Blakey','Horace Silver','Sonny Rollins','Bill Evans'];\n  let listProg = ['Pink Floyd','Camel','Peter Gabriel','Jethro Tull','Mike Oldfield','Porcupine Tree','Rush','Ruins','Genesis','Yes','Supertramp','King Crimson','Frank Zappa','Emerson, Lake & Palmer','Genesis','The Alan Parsons Project'];\n\n  const handleClick = (e,music) => {\n    e.preventDefault();\n    console.log('CLIC '+music);\n    switch(music){\n      case 'metal':\n        setGenre('metal');\n        break;\n      case 'jazz':\n        setGenre('jazz');\n        break;\n      case 'progrock':\n          setGenre('progrock');\n          break;  \n    }\n  }\n\n\n  return (\n    <div className=\"App\">\n      {/* <nav role=\"navigation\">\n      <ul>\n        <li><a href=\"#\">Genres</a>\n          <ul class=\"dropdown\">\n            <li><a href=\"#\" onClick={(e)=>handleClick(e,'metal')}>Metal</a></li>\n            <li><a href=\"#\" onClick={(e)=>handleClick(e,'jazz')}>Jazz</a></li>\n            <li><a href=\"#\" onClick={(e)=>handleClick(e,'progrock')}>Prog rock</a></li>\n          </ul>\n        </li>\n      </ul>\n    </nav> */}\n\n<nav class=\"navbar navbar-expand-md navbar-dark fixed-top text-white\" id=\"main-nav\">\n        <div class=\"container\">\n            <button class=\"navbar-toggler\" data-toggle=\"collapse\" data-target=\"#navbarCollapse\">\n                <span class=\"navbar-toggler-icon\"></span>\n            </button>\n            <div class=\"collapse navbar-collapse\" id=\"navbarCollapse\">\n                <ul class=\"navbar-nav ml-auto d-flex flex-column\">\n                    <li class=\"nav-item mr-1\">\n                      <a class=\"nav-link\" onClick={(e)=>handleClick(e,'metal')}>Metal</a>\n                    </li>\n                    <li class=\"nav-item mr-1\">\n                      <a class=\"nav-link\" onClick={(e)=>handleClick(e,'jazz')}>Jazz</a>\n                    </li>\n                    <li class=\"nav-item mr-1\">\n                      <a class=\"nav-link\" onClick={(e)=>handleClick(e,'progrock')}>Prog Rock</a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n\n    </nav>\n      {genre===''?<Cover genre={listMetalBands}/>:null}\n      {genre==='metal'?<Cover genre={listMetalBands}/>:null}\n      {genre==='jazz'?<Cover genre={listJazz}/>:null}\n      {genre==='progrock'?<Cover genre={listProg}/>:null}\n\n\n    </div>\n  );\n}\n\nexport default App;\n\nconst Cover = (props) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [url, setUrl] = useState('');\n  const [band, setBand] = useState('');\n  const [album, setAlbum] = useState('');\n\n  async function fetchData(band) {\n    const res = await fetch(`https://cors-anywhere.herokuapp.com/https://api.deezer.com/search/autocomplete?q=${band}`);\n    res.json()\n      .then(res => {\n        var newList = res.albums.data.filter(item=> item.artist['name'] === band);\n        let random = Math.floor(Math.random()* Math.floor(newList.length));\n        setUrl(newList[random].cover_big);\n        setAlbum(newList[random].title);\n        setBand(band);\n        setIsLoading(false);\n      })\n      .catch(err => console.log(err));\n  }\n\n  useEffect(() => {\n    fetchData(props.genre[Math.floor(Math.random()* Math.floor(props.genre.length))]);\n  },[]);\n\n  let youtubeSearch = `https://www.youtube.com/results?search_query=${band}+${album}+full+album`;\n  let amazonSearch = `https://www.amazon.fr/s?k=${band}+${album}&__mk_fr_FR=ÅMÅŽÕÑ&ref=nb_sb_noss_1`\n\n\n  return (\n    <div className=\"cover\">\n      {isLoading && <p>The Cover Is Loading...</p>}\n\n      <img \n      className=\"coverPic\" \n      src={url} \n      onClick={()=>fetchData(props.genre[Math.floor(Math.random()* Math.floor(props.genre.length))])}\n      />\n\n      <div className=\"band\">\n        {band}\n        </div>\n\n      <div className=\"album\">\n        {album} (<a href={youtubeSearch} target=\"_blank\"><i class=\"fab fa-youtube\"></i></a> <a href={amazonSearch} target=\"_blank\"><i class=\"fab fa-amazon\"></i></a>)</div>\n      <div className=\"new\">\n        Click on the image for a new cover !\n        </div>      \n    </div>\n  );\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}